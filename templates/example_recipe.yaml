
#===============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#===============================================================================
#
# RECIPE: empty_recipe
#
# DESCRIPTION: This is an example recipe. It aims at teach the user how to
# write his own recipe from scratch
#
# WARNING: It is recommended to use the template provided by Kameleon available
# from the *new* command.
#
#===============================================================================
---
# Loads some helpful aliases
aliases: aliases.yaml
#== Global variables use by Kameleon engine and the steps
global:
  ## User varibales : You can define your own global variables here...
  uuid: $$kameleon_short_uuid
  cachedir: /var/cache/kameleon/
  rootfs: $$kameleon_cwd/rootfs
  user_name: kameleon
  arch: amd64

  ## System variables
  # Distribution
  distrib: debian

  # Shell session from what we launch exec_out commands. There is often a local
  # bash session, but it can be a remote shell on other machines or on any
  # shell. (eg. bash, chroot, fakechroot, ssh, tmux, lxc...)
  out_context:
    - cmd: bash
    - workdir: $$kameleon_cwd

  # Shell session that allows us to connect to the building machine in order to
  # configure it and setup additional programs
  in_context:
    - cmd: env -i USER=root HOME=/root PATH=/usr/bin:/usr/sbin:/bin:/sbin LC_ALL=POSIX chroot $$rootfs bash
    - workdir: /

#== Bootstrap the new system and create context
bootstrap:
  - initialize_contexts
  - build_appliance:
    - mountdir: $$rootfs
    - image_size: 2G
    - filesystem_type: ext4
  - debootstrap:
    - rootfs: $$rootfs
    - version_name: wheezy
    - arch: $$arch
    - repository: http://ftp.fr.debian.org/debian/
    - archive_file: $$cachedir/$$distrib/$$version_name/$$arch/debootstrap.tar.gz
    - include: openssh-server locales less vim bash-completion
  - start_chroot:
    - rootfs: $$rootfs


#== Install and configuration steps
# WARNING: this part should be independante from the build context (whenever
# possible...)
setup:
  # Install
  - software_install:
    - packages: "debian-keyring ntp zip unzip rsync sudo"
  - kernel_install:
    - arch: $$arch
  # Configuration
  - system_config:
    - locales: fr_FR en_US
    - lang: fr_FR.UTF-8
    - timezone: Europe/Paris
    - network_hostname: mydebian
  - keyboard_config:
    - layout: "fr,us"
  - network_config
  - create_user:
    - name: $$user_name
    - group: admin
    - password: $$user_name

#== Export the generated appliance in the format of your choice
# export:
  # - convert_images:
    # - to_tgz
    # - to_qcqf
    # - gfdg
