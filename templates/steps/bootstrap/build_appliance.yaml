# Build Appliance
- create_raw_image:
  - check_cmd_out: qemu-img
  - exec_out: qemu-img create -f raw $$kameleon_recipe_name.raw $$image_size

- attach_nbd_device:
  - check_cmd_out: qemu-nbd
  - exec_out: mkdir -p $$mountdir
  - exec_out: echo Looking for nbd device...
  - exec_out: modprobe nbd max_part=16 || fail failed to load nbd module into kernel
  - exec_out: |
      for i in /dev/nbd*
      do
        echo "Trying to connect $$kameleon_recipe_name.raw to nbd device $i"
        qemu-nbd -c $i $$kameleon_recipe_name.raw && export DISK=$i && break || true
      done
      test ! "$DISK" == "" ||  fail no nbd device available
  - exec_out: echo "$DISK" > .nbd_disk_path
  - exec_out: echo "Connected $$kameleon_recipe_name.raw to $DISK"
  - on_export_clean:
    - exec_out: sync
    - exec_out: test ! -f .nbd_disk_path || qemu-nbd -d $(cat .nbd_disk_path)
    - exec_out: rm -f .nbd_disk_path

- partition_disk:
  - check_cmd_out: sfdisk
  - exec_out: |
      echo "Partitioning $DISK..."
      sfdisk ${DISK} -q -D -uM <<< '
      ,200,83,*
      ;
      ' || fail cannot partition $$kameleon_recipe_name.raw
  - exec_out: |
      echo Creating boot partition...
      mkfs.$$filesystem_type -q ${DISK}p1 || fail cannot create /boot ext4
  - exec_out: |
      echo Creating root partition...
      mkfs.$$filesystem_type -q ${DISK}p2 || fail cannot create / ext4

- create_fstab:
  - on_setup_init:
    - write_out:
      - $$mountdir/etc/fstab
      - |
        # /etc/fstab: static file system information.
        #
        # Use 'blkid' to print the universally unique identifier for a
        # device; this may be used with UUID= as a more robust way to name devices
        # that works even if disks are added and removed. See fstab(5).
        #
        # <file system> <mount point>   <type>  <options>       <dump>  <pass>
        UUID=`blkid -s UUID -o value ${DISK}p2` /               $$filesystem_type    errors=remount-ro  0       1
        UUID=`blkid -s UUID -o value ${DISK}p1` /boot           $$filesystem_type    sync               0       2

- mount_mountdir:
  - exec_out:  "echo Mounting root partition... ;  mount $${nbd_device}p2 $$mountdir || fail cannot mount /"
  - on_export_clean:
    - exec_out: "echo umounting $$mountdir... ; mountpoint -q $$mountdir && umount -f -l $$mountdir || true"
  - exec_out: mkdir -p $$mountdir/boot
  - exec_out:  "echo Mounting boot partition... ;  mount $${nbd_device}p1 $$mountdir/boot || fail cannot mount /boot"
  - on_export_clean:
    - exec_out: "echo umounting $$mountdir/boot... ; mountpoint -q $$mountdir/boot && umount -f -l $$mountdir/boot || true"

- save_disk_path:
  - on_setup_init:
    - pipe:
      - exec_out: echo $DISK
      - exec_in: cat > .appliance_disk
    - exec_in: export DISK=$(cat .appliance_disk)
    - exec_in: rm -f .appliance_disk
