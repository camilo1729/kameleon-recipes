- reboot_timeout: 30

- prepare_sshd:
  - exec_out: mkdir -p $$rootfs/root/.ssh/
  - exec_out: cat /root/.ssh/authorized_keys >> $$rootfs/root/.ssh/authorized_keys
  - exec_out: cat /root/.ssh/authorized_keys >> $$rootfs/root/.ssh/authorized_keys_to_remove
  - exec_out: chmod 600 -R $$rootfs/root/.ssh
  - on_setup_clean:
    - exec_in: grep -v -f /root/.ssh/authorized_keys_to_remove /root/.ssh/authorized_keys || true
    - exec_in: rm -f /root/.ssh/authorized_keys_to_remove

- mount_chroot:
  - exec_out: mount -o bind /dev  $$rootfs/dev
  - exec_out: mount -o bind /dev/pts $$rootfs/dev/pts
  - exec_out: mount -t proc /proc  $$rootfs/proc
  - exec_out: mount -t sysfs /sys  $$rootfs/sys

- create_fstab:
  - write_out:
    - $$rootfs/etc/fstab
    - |
      # /etc/fstab: static file system information.
      #
      # <file system> <mount point>   <type>  <options>       <dump>  <pass>
      UUID=`blkid -s UUID -o value $${disk_device}1` /               $$filesystem_type    errors=remount-ro  0       1

- install_initial_bootloader:
  - exec_out: mkdir -p $$rootfs/boot/extlinux
  - exec_out: extlinux --install $$rootfs/boot/extlinux 2>&1
  - exec_out: MBR_PATH="/usr/lib/extlinux/mbr.bin"
  - exec_out: dd if="$MBR_PATH" of="$$disk_device" bs=440  2>&1
  - write_out:
    - $$rootfs/boot/extlinux/extlinux.conf
    - |
      default linux
      timeout 1
      
      label linux
      kernel ../`basename $$rootfs/boot/vmlinuz*`
      append initrd=../`basename $$rootfs/boot/init*` root=UUID=`blkid -s UUID -o value $${disk_device}1` ro

- umount_all:
  - umount_out: $$rootfs/sys
  - umount_out: $$rootfs/proc
  - umount_out: $$rootfs/dev/pts
  - umount_out: $$rootfs/dev
  - umount_out: $$rootfs

- switch_out2in:
  - exec_local: echo "Rebooting qemu vm"
  - exec_local: echo "eject -f ide1-cd0" | socat - UNIX-CONNECT:$$qemu_monitor_socket
  - exec_local: echo system_reset | socat - UNIX-CONNECT:$$qemu_monitor_socket
  - exec_local: |
        NEXT_WAIT_TIME=0
        until ssh-keyscan -T 1 -4 -p $$qemu_ssh_port localhost  2>&1 | grep -e ssh-rsa -e ssh-dsa &> /dev/null || [ $NEXT_WAIT_TIME -eq $$reboot_timeout ];
        do
          echo -en "\rWaiting for SSH to become available for in_context...($(( $$reboot_timeout - 1 - NEXT_WAIT_TIME++ ))s)"
        done
        echo ""
  - rescue:
    - exec_local: ssh-keyscan -T 1 -4 -p $$qemu_ssh_port localhost  2>&1 | grep -e ssh-rsa -e ssh-dsa &> /dev/null
    - breakpoint: Failed to connect to VM via SSH. Please verify the VM successfully booted by looking at the VirtualBox GUI.

  - reload_context: out
