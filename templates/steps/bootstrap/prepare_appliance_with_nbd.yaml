# Prepare Appliance
- nbd_device: /dev/nbd0

- init_contexts:
  - on_bootstrap_init:
    - exec_out: "fail() { echo $@ 1>&2; false; }"
  - on_setup_init:
    - exec_in: "fail() { echo $@ 1>&2; false; }"

- create_raw_image:
  - check_cmd_out: qemu-img
  - exec_out: mkdir -p checkpoints
  - exec_out: |
      if [ ! -e "$$container" ] ; then
        qemu-img create -f qcow2 checkpoints/base_$$container $$image_size
        ln -sf checkpoints/base_$$container $$container
      fi

- load_nbd_module:
  - on_bootstrap_init:
    - exec_out: |
        lsmod | grep nbd >/dev/null \
        || modprobe nbd max_part=63 \
        || fail failed to load nbd module into kernel

- attach_nbd_device:
  - on_checkpoint: skip
  - check_cmd_out: qemu-nbd
  - exec_out: echo Connecting $$container to nbd device $$nbd_device
  - exec_out: qemu-nbd -c $$nbd_device "$(readlink $$container)" -n || fail nbd device $$container is unavailable


- detach_nbd_device:
  - on_export_clean:
    - exec_out: echo "sync" ; sync
    - exec_out: qemu-nbd -d $$nbd_device
    - exec_out: "pgrep qemu-nbd | xargs -I {} kill -9 {} || true"

- partition_disk:
  - check_cmd_out: sfdisk
  - exec_out: |
      echo "Partitioning disk..."
      sfdisk $${nbd_device} -q -D -uM --force --no-reread <<< '
      ,200,83,*
      ;
      ' 2>&1 || fail cannot partition $$container
  - exec_out: |
      echo Creating boot partition...
      mkfs.$$filesystem_type -q $${nbd_device}p1 || fail cannot create /boot ext4
  - exec_out: |
      echo Creating root partition...
      mkfs.$$filesystem_type -q $${nbd_device}p2 || fail cannot create / ext4

- mount_mountdir:
  - on_checkpoint: redo
  - exec_out: mkdir -p $$mountdir
  - exec_out:  "echo Mounting root partition... ;  mount $${nbd_device}p2 $$mountdir || fail cannot mount /"
  - on_export_clean:
    - exec_out: "echo umounting $$mountdir... ; mountpoint -q $$mountdir && umount -f -l $$mountdir || true"
  - exec_out: mkdir -p $$mountdir/boot
  - exec_out:  "echo Mounting boot partition... ;  mount $${nbd_device}p1 $$mountdir/boot || fail cannot mount /boot"
  - on_export_clean:
    - exec_out: "echo umounting $$mountdir/boot... ; mountpoint -q $$mountdir/boot && umount -f -l $$mountdir/boot || true"


- install_extlinux:
  - on_export_init:
    - exec_in: extlinux-install $$nbd_device 2>&1
    - write_in:
      - /boot/extlinux/extlinux.conf
      - |
        default linux
        timeout 1
        
        label linux
        kernel ../`basename /boot/vmlinuz*`
        append initrd=../`basename /boot/init*` root=/dev/sda2 ro
    - exec_in: |
        dir=/var/lib/os-prober/mount
        if [ -d "$dir" ]
        then umount -f -l "$dir" && rmdir "$dir"
        fi

- create_fstab:
  - on_export_init:
    - write_in:
      - /etc/fstab
      - |
        # /etc/fstab: static file system information.
        #
        # Use 'blkid' to print the universally unique identifier for a
        # device; this may be used with UUID= as a more robust way to name devices
        # that works even if disks are added and removed. See fstab(5).
        #
        # <file system> <mount point>   <type>  <options>       <dump>  <pass>
        /dev/sda2 /               $$filesystem_type    errors=remount-ro  0       1
        /dev/sda1 /boot           $$filesystem_type    sync               0       2
