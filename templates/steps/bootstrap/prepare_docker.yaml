- insecure_ssh_key: $$kameleon_cwd/insecure_ssh_key

- clean_containers:
  - on_checkpoint: redo
  - on_export_clean:
    - exec_out: echo "Stopping trailing containers"
    - exec_out: touch CONTAINERS_TO_CLEAN
    - exec_out: cat CONTAINERS_TO_CLEAN | xargs -I {} docker kill {}
    - exec_out: echo "Removing trailing containers"
    - exec_out: cat CONTAINERS_TO_CLEAN | xargs -I {} docker rm {}
    - exec_out: rm -f CONTAINERS_TO_CLEAN


- configure_ssh_access:
  - exec_out: echo -e  'y\n' | ssh-keygen -q -t dsa -f $$insecure_ssh_key -N ''
  - exec_out: cat $$insecure_ssh_key
  - exec_out: chroot $$rootfs mkdir -p /root/.ssh
  - exec_out: |
        cat $${insecure_ssh_key}.pub > $$rootfs/root/.ssh/authorized_keys
        cat $${insecure_ssh_key}.pub > $$rootfs/root/.ssh/kameleon_insecure_public_key
        chmod 600 $$rootfs/root/.ssh/authorized_keys
        chmod 755 $$rootfs/root/.ssh
  - on_clean:
    - exec_out: rm -rf $$rootfs/root/.ssh

- import_to_docker:
  - check_cmd_out: docker
  - exec_out: echo "Importing $$docker_image to docker..."
  - exec_out: tar -C $$rootfs -c . | docker import - $$docker_image:base

- create_ssh_config:
  - write_out:
    - $$ssh_config_file
    - |
      Host $$kameleon_recipe_name
      HostName 127.0.0.1
      User root
      IdentityFile $$insecure_ssh_key
      UserKnownHostsFile /dev/null
      StrictHostKeyChecking no
      PasswordAuthentication no
      IdentitiesOnly yes
      LogLevel FATAL
      ForwardAgent yes
      ControlPath /tmp/$${kameleon_short_uuid}%r@%h:%p
      ControlMaster auto
      ControlPersist yes
      Compression yes
      Protocol 2
  - on_export_clean:
    - exec_out: rm -f /tmp/$${kameleon_short_uuid}*
